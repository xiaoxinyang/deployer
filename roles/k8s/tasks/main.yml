- name: Test
  debug: 
    msg: "{{ lookup('env','HOME') }}"

- name: Install public docker key
  apt_key:
    url: 'https://download.docker.com/linux/ubuntu/gpg'

- name: Install public k8s key
  apt_key:
    url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'

- name: Cleanup sources.list
  lineinfile:
    path: /etc/apt/sources.list
    regexp: "{{ item.regex }}"
    state: absent
    backup: yes
  loop:
    - {regex: "^#"}
    - {regex: "-security"}
    - {regex: "-updates"}
    - {regex: "-backports"}

- name: Add the docker apt repository
  copy:
    dest: "/etc/apt/sources.list.d/docker.list"
    content: |
      deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable

- name: Add the Kubernetes apt repository
  copy:
    dest: "/etc/apt/sources.list.d/kubernetes.list"
    content: |
      deb https://apt.kubernetes.io/ kubernetes-xenial main

- name: Ensure docker systemd directory exists
  file:
    path: /etc/systemd/system/docker.service.d/
    state: directory

- name: Enable proxy in docker environment variables
  template:
    src: http-proxy.conf
    dest: /etc/systemd/system/docker.service.d/http-proxy.conf

- name: Install docker
  apt:
    name: docker-ce,docker-ce-cli,containerd.io
    state: present
    update_cache: true

- name: Create docker daemon.json
  copy:
    dest: "/etc/docker/daemon.json"
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }

- name: Restart docker
  service:
    name: docker
    daemon_reload: yes
    state: restarted

- name: Install kubeadm
  apt:
    name: kubeadm
    state: present
    update_cache: true

- name: Kubeadm init
  shell: |
    set -o pipefail
    kubeadm reset --force
    kubeadm init --pod-network-cidr={{ pod_network_cidr }} --apiserver-advertise-address=10.0.0.220

- name: Ensures /root/.kube/ dir exists
  file: path=/root/.kube/ state=directory
  
- name: Copy kubectl configuration for the root user
  copy:
    remote_src: True
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    owner: root
    group: root
    mode: 0600

- name: Ensures /home/{{ ansible_user }}.kube/ dir exists
  file: path="/home/{{ ansible_user }}/.kube/" state=directory
  
- name: Copy kubectl configuration for ansible_user
  copy:
    remote_src: True
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"  
    group: "{{ ansible_user }}"
    mode: 0600

- name: Install calicoctl
  shell: |
    curl -o /usr/local/bin/calicoctl -O -L  "https://github.com/projectcalico/calicoctl/releases/download/v3.19.1/calicoctl" && chmod +x /usr/local/bin/calicoctl

- name: Install calivppctl
  shell: |
    curl -o /usr/local/bin/calivppctl -O -L "https://raw.githubusercontent.com/projectcalico/vpp-dataplane/master/test/scripts/vppdev.sh" && chmod +x /usr/local/bin/calivppctl

- name: Install calico vpp
  shell: |
    curl https://raw.githubusercontent.com/projectcalico/vpp-dataplane/master/yaml/generated/calico-vpp-nohuge.yaml | sed 's,vpp_dataplane_interface: eth1,vpp_dataplane_interface: ens3,' | kubectl create -f -
    # kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
    # curl https://docs.projectcalico.org/manifests/custom-resources.yaml | sed -E 's,cidr\:.*,cidr\: {{pod_network_cidr}},' | kubectl create -f -
    kubectl taint nodes --all node-role.kubernetes.io/master-

- name: Install helm
  shell: |
    set -o pipefail
    curl https://get.helm.sh/helm-v3.6.1-linux-amd64.tar.gz | ( cd /usr/local/bin; tar zxvf - linux-amd64/helm --strip-components=1 )

- name: Install ingress controller
  shell: |
    helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm install ingress-nginx ingress-nginx/ingress-nginx
    # https://stackoverflow.com/questions/61365202/nginx-ingress-service-ingress-nginx-controller-admission-not-found
    kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission

- name: Enable dynamic volume provisioning
  shell: |
    set -o pipefail

- name: Install local storage
  block:
    - name: Copy
      template:
        src: local-storage.yml
        dest: /var/tmp/local-storage.yml

    - name: Apply
      shell: |
        kubectl apply -f /var/tmp/local-storage.yml

- name: Deploy a test Helm Chart
  shell: |
    helm create test-chart
    cat test-chart/values.yaml | sed '/ingress:/!b;n;c\ \ enabled: true' > test-chart/test-chart-values.yaml
    helm upgrade  --install test-chart test-chart/ --values test-chart/test-chart-values.yaml

- name: Install Prometheus
  shell: |
    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    helm repo update
    helm install prometheus prometheus-community/prometheus --create-namespace --namespace prometheus --set server.persistentVolume.storageClass=local-storage --set alertmanager.persistentVolume.storageClass=local-storage

- name: Install grafana
  shell: |
    helm repo add grafana https://grafana.github.io/helm-charts
    helm repo update
    helm install grafana grafana/grafana  --set ingress.enabled=true --set ingress.hosts[0]="grafana.10.0.0.234.nip.io"
