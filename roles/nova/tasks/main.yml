- name: Populate service facts
  service_facts:

- name: Set variables CentOS
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  set_fact:
    network_manager_packages: NetworkManager-ovs
    openvswitch_packages: "[ 'openvswitch', 'NetworkManager-ovs' ]"
    libvirt_kvm_packages: "[ 'qemu-kvm', 'libvirt', 'virt-install' ]"
    mariadb_pacakges: "[ 'mariadb', 'mariadb-server' ]"
    httpd_service: httpd
    glance_api_service: openstack-glance-api
    nova_services: "[ 'openstack-nova-conductor', 'openstack-nova-novncproxy', 'openstack-nova-scheduler' ]"
    nova_compute_service: openstack-nova-compute
    dashboard_local_settings_file: "/etc/openstack-dashboard/local_settings"
    dashboard_conf_file: "/etc/httpd/conf.d/openstack-dashboard.conf"
    cinder_services: "['openstack-cinder-api', 'openstack-cinder-scheduler', 'openstack-cinder-volume']"

- name: Set variables Ubuntu
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  set_fact:
    network_manager_packages: network-manager
    openvswitch_packages: "[ 'openvswitch-switch' ] "
    libvirt_kvm_packages: "[ 'qemu-kvm', 'libvirt-daemon', 'libvirt-clients', 'libvirt-daemon-system' ]"
    mariadb_pacakges: "[ 'mariadb-server-10.3' ]"
    httpd_service: apache2
    glance_api_service: glance-api
    nova_services: "[ 'nova-conductor', 'nova-novncproxy', 'nova-scheduler' ]"
    nova_compute_service: nova-compute
    dashboard_local_settings_file: "/etc/openstack-dashboard/local_settings.py"
    dashboard_conf_file: "/etc/apache2/conf-available/openstack-dashboard.conf"
    cinder_services: "['apache2', 'cinder-scheduler', 'cinder-volume']"

- name: Disable SELinux
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  block:
    - name: Disable SELinux
      selinux:
        state: disabled
      register: selinux_stat

    - name: Reboot
      reboot:
      when: selinux_stat.reboot_required == True

- name: Disable firewalld
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  service:
     name: firewalld
     enabled: false
     state: stopped

- name: Disable apparmor
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  block:
    - name: Disable apparmor service
      service:
        name: apparmor
        enabled: false

    - name: Disable apparmor in grub
      shell: |
        echo 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT apparmor=0"' | tee /etc/default/grub.d/apparmor.cfg
        update-grub

    - name: Reboot
      reboot:
      when: ansible_facts.services['apparmor'].state == "running"

- name: Add epel
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  dnf:
    name: epel-release
    state: present

- name: Add the Repository of Openstack
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  shell: |
    add-apt-repository -y cloud-archive:{{ os_release }}

- name: Add the Repository of Openstack
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  dnf:
    name:
      - centos-release-openstack-{{ os_release }}

- name: KVM
  block:
    - name: KVM - Install
      package:
        name: "{{ libvirt_kvm_packages }}"

    - name: KVM - Enable and start libvirtd
      service:
        name: libvirtd
        enabled: yes
        state: started

- name: Install and Configure Chrony
  package:
    name: chrony
    state: present

- name: Nova
  block:
    - name: Nova - Install
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      dnf:
        name: openstack-nova
        enablerepo: centos-openstack-{{ os_release }},powertools,epel
        state: latest

    - name: Nova - Install
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      package:
        name: nova-compute
        state: latest

    - name: Nova - Copy nova.conf
      template:
        src:  "nova.conf"
        dest: /etc/nova/
        owner: root
        group: nova 
        mode: 0640

    - name: Nova - enable & start compute service
      service:
        name: "{{ nova_compute_service }}"
        enabled: yes
        state: started
