- name: debug
  debug: var=ansible_default_ipv4.address

- name: 
  set_fact:
    controller_ip: "{{ ansible_default_ipv4.address }}"
  delegate_facts: true
  delegate_to: "{{ item }}"
  delegate_facts: True
  loop: "{{ groups['all'] }}"

- name: Install rabbitmq-server and memcached
  package:
    name:
      - rabbitmq-server
      - memcached
    state: present

- name: Install and start MariaDB
  block:
    - name: Install MariaDB
      package:
        name: "{{ mariadb_pacakges }}"
        state: present

    - name: Configure MariaDB to listen on 0.0.0.0
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      replace:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^bind-address.*$'
        replace: 'bind-address            = 0.0.0.0'

    - name: Configure max_connections to 4096
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      replace:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^#max_connections.*$'
        replace: 'max_connections            = 4096'

    - name: Configure max_connections to 4096
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      lineinfile:
        insertafter: "^\\[mysqld\\]$"
        path: /etc/my.cnf.d/mariadb-server.cnf
        regexp: "^max_connections = .*$"
        line: 'max_connections = 4096'
        state: present

    - name: Enable and start MariaDB
      service:
        name: mariadb
        enabled: yes
        state: restarted

- name: Init MariaDB with mysql_secure_installation
  block:
    - name: Copy mysql_secure_installation script
      copy:
        src:  "{{ playbook_dir }}/mysql_secure.sh"
        dest: /tmp
    - name: Run mysql_secure_installation script
      shell: |
        set -o pipefail
        bash /tmp/mysql_secure.sh admin

- name: Configure and start Memcached
  block:
    - name: Configure Memcached to listen on 0.0.0.0
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      replace:
        path: /etc/sysconfig/memcached
        regexp: '^OPTIONS.*$'
        replace: 'OPTIONS="-l 0.0.0.0,::"'

    - name: Configure Memcached to listen on 0.0.0.0
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      replace:
        path: /etc/memcached.conf
        regexp: '^-l 127.0.0.1'
        replace: '-l 0.0.0.0,::'

    - name: Enable and start Memcached
      service:
        name: memcached
        enabled: yes
        state: restarted

- name: Enable and start rabbitmq-server
  service:
    name: rabbitmq-server
    enabled: yes
    state: started

- name: Add openstack user to rabbitmq
  shell: |
    set -o pipefail
    rabbitmqctl list_users | grep ^openstack -q || rabbitmqctl add_user openstack password
    rabbitmqctl set_permissions openstack ".*" ".*" ".*"

- name: Keystone - Add a User and Database on MariaDB
  shell: |
    echo "create database if not exists keystone; grant all privileges on keystone.* to keystone@'localhost' identified by 'password'; grant all privileges on keystone.* to keystone@'%' identified by 'password'; flush privileges;" | mysql --user=root --password=admin

- name: Keystone
  block:
    - name: Keystone - Install
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      dnf:
        name: openstack-keystone,python3-openstackclient,httpd,mod_ssl,python3-mod_wsgi,python3-oauth2client,python3-osc-placement
        enablerepo: centos-openstack-{{ openstack_release }},epel,powertools
        state: latest

    - name: Keystone - Install
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      package:
        name: keystone,python3-keystone,python3-openstackclient,apache2,python3-oauth2client,python3-osc-placement,libapache2-mod-wsgi-py3
        state: latest

    - name: Keystone - Configure memcache_servers
      replace:
        path: /etc/keystone/keystone.conf
        regexp: '^.*memcache_servers.*$'
        replace: 'memcache_servers = {{ controller_ip }}:11211'

    - name: Keystone - Configure connection
      replace:
        path: /etc/keystone/keystone.conf
        regexp: '^#connection =.*$'
        replace: 'connection = mysql+pymysql://keystone:password@{{ controller_ip }}/keystone'

    - name: Keystone - Configure provider
      replace:
        path: /etc/keystone/keystone.conf
        regexp: '^#provider = fernet$'
        replace: 'provider = fernet'

    - name: Keystone - db_sync
      become: true
      become_user: keystone
      shell: |
        keystone-manage db_sync

    - name: Keystone - initialize keys
      shell: |
        keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
        keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

    - name: Keystone - bootstrap keystone
      shell: |
              controller={{ controller_ip }} && keystone-manage bootstrap --bootstrap-password adminpassword \
                --bootstrap-admin-url http://$controller:5000/v3/ \
                --bootstrap-internal-url http://$controller:5000/v3/ \
                --bootstrap-public-url http://$controller:5000/v3/ \
                --bootstrap-region-id RegionOne

    - name: Keystone - Add wsgi-keystone.conf for httpd
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      file:
        state: link
        src: /usr/share/keystone/wsgi-keystone.conf
        dest: /etc/httpd/conf.d/wsgi-keystone.conf

    - name: Keystone - restart httpd
      service:
        enabled: yes
        name: "{{ httpd_service }}"
        state: restarted

    - name: Install keystonerc
      block:
        - name: "Copy keystonerc - {{ ansible_user }}"
          template:
            backup: yes
            src:  "keystonerc"
            dest: "/home/{{ ansible_user }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
        - name: "Update .bashrc - {{ ansible_user }}"
          lineinfile:
            path: "/home/{{ ansible_user }}/.bashrc"
            regexp: "^. ./keystonerc$"
            line: ". ./keystonerc"
            state: present
        - name: Copy keystonerc - root
          template:
            backup: yes
            src:  "keystonerc"
            dest: "/root"
        - name: Update .bashrc - root
          lineinfile:
            path: "/root/.bashrc"
            regexp: "^. ./keystonerc$"
            line: ". ./keystonerc"
            state: present

- name: create [service] project
  shell: |
    openstack project show service || openstack project create --domain default --description "Service Project" service

- name: Glance
  block:
    - name: create [glance] user in [service] project
      shell: |
        openstack user show glance || openstack user create --domain default --project service --password servicepassword glance

    - name: add [glance] user in [admin] role
      shell: |
        openstack role add --project service --user glance admin

    - name: create service entry for [glance]
      shell: |
        openstack service show image || openstack service create --name glance --description "OpenStack Image service" image

    - name: create endpoint for [glance]
      shell: |
                  controller={{ controller_ip }} && ( openstack endpoint list --service image --region RegionOne  --interface public | grep -q public || openstack endpoint create --region RegionOne image public http://$controller:9292 )&& \
                  ( openstack endpoint list --service image --region RegionOne  --interface internal | grep -q internal || openstack endpoint create --region RegionOne image internal http://$controller:9292 )  && \
                  ( openstack endpoint list --service image --region RegionOne  --interface admin | grep -q admin || openstack endpoint create --region RegionOne image admin http://$controller:9292 )

    - name: Glance - Add a User and Database on MariaDB for Glance
      shell: |
        echo "create database if not exists glance; grant all privileges on glance.* to glance@'localhost' identified by 'password'; grant all privileges on glance.* to glance@'%' identified by 'password'; flush privileges;" | mysql --user=root --password=admin

    - name: Glance - Install
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      dnf:
        name: openstack-glance
        enablerepo: centos-openstack-{{ openstack_release }},powertools,epel
        state: latest

    - name: Glance - Install
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      package:
        name: glance
        state: latest

    - name: Glance - Copy glance-api.conf
      template:
        backup: yes
        src:  "glance-api.conf"
        dest: /etc/glance/
        owner: root
        group: glance
        mode: 0640

    - name: Glance - db_sync
      become: true
      become_user: glance
      command:
        cmd: glance-manage db_sync

    - name: Glance - restart openstack-glance-api
      service:
        name: "{{ glance_api_service }}"
        enabled: yes
        state: restarted

- name: Nova
  block:
    - name: Nova - create [nova] user in [service] project
      shell: |
        openstack user show nova || openstack user create --domain default --project service --password servicepassword nova

    - name: Nova - add [nova] user in [admin] role
      shell: |
        openstack role add --project service --user nova admin

    - name: Nova - create [placement] user in [service] project
      shell: |
        openstack user show placement || openstack user create --domain default --project service --password servicepassword placement

    - name: Nova - add [placement] user in [admin] role
      shell: |
        openstack role add --project service --user placement admin

    - name: Nova - create service entry for [nova]
      shell: |
        openstack service show compute || openstack service create --name nova --description "OpenStack Compute service" compute

    - name: Nova - create service entry for [placement]
      shell: |
        openstack service show placement || openstack service create --name placement --description "OpenStack Compute Placement service" placement

    - name: Nova - create endpoint for [nova]
      shell: |
        controller={{ controller_ip }} && ( openstack endpoint list --service compute --region RegionOne  --interface public | grep -q public || openstack endpoint create --region RegionOne compute public http://$controller:8774/v2.1/%\(tenant_id\)s ) && \
        ( openstack endpoint list --service compute --region RegionOne  --interface internal | grep -q internal || openstack endpoint create --region RegionOne compute internal http://$controller:8774/v2.1/%\(tenant_id\)s )  && \
        ( openstack endpoint list --service compute --region RegionOne  --interface admin | grep -q admin || openstack endpoint create --region RegionOne compute admin http://$controller:8774/v2.1/%\(tenant_id\)s )

    - name: Nova - create endpoint for [placement]
      shell: |
        controller={{ controller_ip }} && ( openstack endpoint list --service placement --region RegionOne  --interface public | grep -q public || openstack endpoint create --region RegionOne placement public http://$controller:8778 ) && \
        ( openstack endpoint list --service placement --region RegionOne  --interface internal | grep -q internal || openstack endpoint create --region RegionOne placement internal http://$controller:8778 )  && \
        ( openstack endpoint list --service placement --region RegionOne  --interface admin | grep -q admin || openstack endpoint create --region RegionOne placement admin http://$controller:8778 )

    - name: Nova - Add a User and Database on MariaDB
      shell: |
        echo "create database if not exists nova; grant all privileges on nova.* to nova@'localhost' identified by 'password'; grant all privileges on nova.* to nova@'%' identified by 'password'; flush privileges;" | mysql --user=root --password=admin
        echo "create database if not exists nova_api; grant all privileges on nova.* to nova@'localhost' identified by 'password'; grant all privileges on nova_api.* to nova@'%' identified by 'password'; flush privileges;" | mysql --user=root --password=admin
        echo "create database if not exists nova_cell0; grant all privileges on nova.* to nova@'localhost' identified by 'password'; grant all privileges on nova_cell0.* to nova@'%' identified by 'password'; flush privileges;" | mysql --user=root --password=admin
        echo "create database if not exists placement; grant all privileges on placement.* to placement@'localhost' identified by 'password'; grant all privileges on placement.* to placement@'%' identified by 'password'; flush privileges;" | mysql --user=root --password=admin

    - name: Nova - Install
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      dnf:
        name: openstack-nova,openstack-placement-api
        enablerepo: centos-openstack-{{ openstack_release }},powertools,epel
        state: latest

    - name: Nova - Install
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      package:
        name: nova-api,nova-conductor,nova-novncproxy,nova-scheduler,placement-api
        state: latest

    - name: Nova - Copy nova.conf
      template:
        backup: yes
        src:  "nova.conf"
        dest: /etc/nova/
        owner: root
        group: nova 
        mode: 0640

    - name: Nova - Copy placement.conf
      template:
        backup: yes
        src:  "placement.conf"
        dest: /etc/placement/
        owner: root
        group: placement 
        mode: 0640

    - name: Nova - Modify 00-placement-api.conf
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      blockinfile:
        path:  /etc/httpd/conf.d/00-placement-api.conf
        insertbefore: '</VirtualHost>'
        block: |
          <Directory /usr/bin>
            Require all granted
          </Directory>

    - name: Nova - restart httpd for placement api
      service:
        name: "{{ httpd_service }}"
        state: restarted

    - name: Nova - placement db_sync
      become: true
      become_user: placement
      command:
        cmd: placement-manage db sync

    - name: Nova - api_db sync
      become: true
      become_user: nova
      command:
        cmd: nova-manage api_db sync

    - name: Nova - map_cell0
      become: true
      become_user: nova
      command:
        cmd: nova-manage cell_v2 map_cell0

    - name: Nova - db sync 
      become: true
      become_user: nova
      shell: |
        ( echo "show tables;" | mysql --user=root --password=admin nova_cell0 | grep -w instances -q ) || nova-manage db sync

    - name: Nova - create_cell
      become: true
      become_user: nova
      shell: |
        ( nova-manage cell_v2 list_cells | grep -q -w cell1) || nova-manage cell_v2 create_cell --name cell1

    - name: Nova - enable & start services
      service:
        name: "{{ item }}"
        enabled: yes
        state: restarted
      loop: "{{ nova_services }}"

    - name: Nova - discover Compute Node
      become: true
      become_user: nova
      command:
        cmd: nova-manage cell_v2 discover_hosts

- name: Neutron
  block:
    - name: Neutron - create openvswitch bridge
      shell: |
        ovs-vsctl br-exists br-{{ provider_interface }} || ( ovs-vsctl add-br br-{{ provider_interface }} && ovs-vsctl add-port br-{{ provider_interface }} {{ provider_interface }}  &&
          iptables -A INPUT -i br-{{ provider_interface }}  -j ACCEPT  &&
          iptables -A FORWARD -i br-{{ provider_interface }} -j ACCEPT  &&
          iptables -A FORWARD -i br-{{ provider_interface }} -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT  &&
          iptables -A FORWARD -i eth0 -o br-{{ provider_interface }} -m state --state RELATED,ESTABLISHED -j ACCEPT  &&
          iptables -t nat -A POSTROUTING -s 10.0.0.0/24 ! -d 10.0.0.0/24  -o eth0 -j MASQUERADE  &&
          iptables -A OUTPUT -o br-{{ provider_interface }} -j ACCEPT
        )

    - name: Neutron - create [neutron] user in [service] project
      shell: |
        openstack user show neutron || openstack user create --domain default --project service --password servicepassword neutron

    - name: Neutron - add [neutron] user in [admin] role
      shell: |
        openstack role add --project service --user neutron admin

    - name: Neutron - create service entry for [neutron]
      shell: |
        openstack service show neutron || openstack service create --name neutron --description "OpenStack Networking service" network

    - name: Neutron - create endpoint for [neutron]
      shell: |
        controller={{ controller_ip }} && ( openstack endpoint list --service network --region RegionOne  --interface public | grep -q public || openstack endpoint create --region RegionOne network public http://$controller:9696 ) && \
        ( openstack endpoint list --service network --region RegionOne  --interface internal | grep -q internal || openstack endpoint create --region RegionOne network internal http://$controller:9696 )  && \
        ( openstack endpoint list --service network --region RegionOne  --interface admin | grep -q admin || openstack endpoint create --region RegionOne network admin http://$controller:9696 )

    - name: Neutron - Add a User and Database on MariaDB
      shell: |
        echo "create database if not exists neutron_ml2; grant all privileges on neutron_ml2.* to neutron@'localhost' identified by 'password'; grant all privileges on neutron_ml2.* to neutron@'%' identified by 'password'; flush privileges;" | mysql --user=root --password=admin

    - name: Neutron - Install
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      dnf:
        name: openstack-neutron,openstack-neutron-ml2,openstack-neutron-openvswitch
        enablerepo: centos-openstack-{{ openstack_release }},powertools,epel
        state: latest

    - name: Neutron - Install
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      package:
        name: neutron-server,neutron-plugin-ml2,neutron-openvswitch-agent,neutron-dhcp-agent,neutron-l3-agent,neutron-metadata-agent
        state: latest

    - name: Neutron - Copy neutron.conf
      template:
        backup: yes
        src:  "neutron.conf"
        dest: /etc/neutron/
        owner: root
        group: neutron 
        mode: 0640

    - name: Neutron - Update l3_agent.ini
      lineinfile:
        path: "/etc/neutron/l3_agent.ini"
        insertafter: "^\\[DEFAULT\\]$"
        regexp: "^interface_driver = .*$"
        line: "interface_driver = openvswitch"
        state: present

    - name: Neutron - Update dhcp_agent.ini
      lineinfile:
        path: "/etc/neutron/dhcp_agent.ini"
        insertafter: "^\\[DEFAULT\\]$"
        regexp: "^{{ item.key }} = .*$"
        line: "{{ item.key }} = {{ item.value}}"
        state: present
      with_items:
        - {key: "interface_driver", value: "openvswitch"}
        - {key: "dhcp_driver", value: "neutron.agent.linux.dhcp.Dnsmasq"}
        - {key: "enable_isolated_metadata", value: "true"}

    - name: Neutron - Update metadata_agent.ini
      lineinfile:
        path: "/etc/neutron/metadata_agent.ini"
        insertafter: "^\\[DEFAULT\\]$"
        regexp: "^{{ item.key }} = .*$"
        line: "{{ item.key }} = {{ item.value}}"
        state: present
      with_items:
        - {key: "nova_metadata_host", value: "{{ controller_ip }}"}
        - {key: "metadata_proxy_shared_secret", value: "metadata_secret"}

    - name: Neutron - Update memcache_servers in metadata_agent.ini
      replace:
        path: "/etc/neutron/metadata_agent.ini"
        regexp: '^.*memcache_servers.*$'
        replace: 'memcache_servers = {{ controller_ip }}:11211'

    - name: Neutron - Copy ml2_conf.ini
      template:
        backup: yes
        src:  "ml2_conf.ini"
        dest: /etc/neutron/plugins/ml2/
        owner: root
        group: neutron 
        mode: 0640

    - name: Neutron - link ml2_conf.ini to /etc/neutron/plugin.ini
      file:
        state: link
        src: /etc/neutron/plugins/ml2/ml2_conf.ini
        dest: /etc/neutron/plugin.ini

    - name: Neutron - Copy openvswitch_agent.ini
      template:
        backup: yes
        src:  "openvswitch_agent.ini"
        dest: /etc/neutron/plugins/ml2/
        owner: root
        group: neutron 
        mode: 0640

    - name: Neutron - db-manage upgrade head
      become: true
      become_user: neutron
      command:
        cmd: neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugin.ini upgrade head

    - name: Neutron - enable & start network services
      service:
        name: "{{ item }}"
        enabled: yes
        state: restarted
      loop:
        - neutron-server
        - neutron-dhcp-agent
        - neutron-l3-agent
        - neutron-metadata-agent
        - neutron-openvswitch-agent

    - name: Neutron - restart openvswitch agent service
      service:
        name: neutron-openvswitch-agent
        enabled: yes
        state: restarted

    - name: Neutron - create sharenet1
      shell: |
              sleep 5
              openstack network show sharednet1 || ( projectID=$(openstack project list | grep service | awk '{print $2}') && openstack network create --project $projectID \
              --share --external --provider-network-type flat --provider-physical-network physnet1 sharednet1 \
              && openstack subnet create subnet1 --network sharednet1 \
              --project $projectID --subnet-range 10.0.0.0/24 \
              --allocation-pool start=10.0.0.200,end=10.0.0.254 \
              --gateway {{ controller_ip }} --dns-nameserver {{ dns_nameserver }} )

- name: openstack - create flavor
  shell: |
    openstack flavor show m1.small || openstack flavor create --id 0 --vcpus 2 --ram 2048 --disk 40 m1.small

- name: openstack - create security group
  shell: |
    openstack security group show secgroup01 || ( openstack security group create secgroup01 \
    && openstack security group rule create --protocol icmp  secgroup01 \
    && openstack security group rule create  secgroup01 --protocol tcp --dst-port 22:22 --remote-ip 0.0.0.0/0 )

- name: Cinder
  block:
    - name: create [cinder] user in [service] project
      shell: |
        openstack user show cinder || openstack user create --domain default --project service --password servicepassword cinder

    - name: add [cinder] user in [admin] role
      shell: |
        openstack role add --project service --user cinder admin

    - name: create service entry for [cinder]
      shell: |
        openstack service show volumev3 || openstack service create --name cinderv3 --description "OpenStack Block Storage" volumev3

    - name: create endpoint for [cinder]
      shell: |
        controller={{ controller_ip }} && ( openstack endpoint list --service volumev3 --region RegionOne  --interface public | grep -q public || openstack endpoint create --region RegionOne volumev3 public http://$controller:8776/v3/%\(tenant_id\)s ) && \
        ( openstack endpoint list --service volumev3 --region RegionOne  --interface internal | grep -q internal || openstack endpoint create --region RegionOne volumev3 internal http://$controller:8776/v3/%\(tenant_id\)s )  && \
        ( openstack endpoint list --service volumev3 --region RegionOne  --interface admin | grep -q admin || openstack endpoint create --region RegionOne volumev3 admin http://$controller:8776/v3/%\(tenant_id\)s )

    - name: Add a User and Database on MariaDB
      shell: |
        echo "create database if not exists cinder; grant all privileges on cinder.* to cinder@'localhost' identified by 'password'; grant all privileges on cinder.* to cinder@'%' identified by 'password'; flush privileges;" | mysql --user=root --password=admin

    - name: Cinder - Install
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      dnf:
        name: openstack-cinder
        enablerepo: centos-openstack-{{ openstack_release }},powertools,epel
        state: latest

    - name: Cinder - Install
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      package:
        name: cinder-api,cinder-scheduler
        state: latest

    - name: Cinder - Copy cinder.conf
      template:
        backup: yes
        src:  "cinder.conf"
        dest: /etc/cinder/
        owner: root
        group: cinder
        mode: 0640

    - name: cinder - db sync
      become: true
      become_user: cinder
      shell: |
        cinder-manage db sync

    - name: cinder - restart services
      service:
        name: "{{ item }}"
        enabled: yes
        state: restarted
      loop: "{{ cinder_services }}"

- name: Horizon
  block:
    - name: Horizon - Install
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      dnf:
        name: openstack-dashboard
        enablerepo: centos-openstack-{{ openstack_release }},powertools,epel
        state: latest

    - name: Horizon - Install
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      package:
        name: openstack-dashboard
        state: latest

    - name: Horizon - config allowed hosts
      replace:
        path: "{{ dashboard_local_settings_file }}"
        regexp: '^.*ALLOWED_HOSTS.*$'
        replace: "ALLOWED_HOSTS = ['*', ]"

    - name: Horizon - config caches
      blockinfile:
        path: "{{ dashboard_local_settings_file }}"
        insertafter: '#CACHES =.*$'
        block: |
          CACHES = {
              'default': {
                  'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
                  'LOCATION': '{{ controller_ip }}:11211',
              },
          }

    - name: Horizon - config session engine 
      replace:
        path: "{{ dashboard_local_settings_file }}"
        regexp: '^.*SESSION_ENGINE.*$'
        replace: 'SESSION_ENGINE = "django.contrib.sessions.backends.cache"'

    - name: Horizon - config openstack host 
      replace:
        path: "{{ dashboard_local_settings_file }}"
        regexp: '^OPENSTACK_HOST.*$'
        replace: 'OPENSTACK_HOST = "{{ controller_ip }}"'

    - name: Horizon - config openstack keystone url 
      replace:
        path: "{{ dashboard_local_settings_file }}"
        regexp: '^.*OPENSTACK_KEYSTONE_URL.*$'
        replace: 'OPENSTACK_KEYSTONE_URL = "http://{{ controller_ip }}:5000/v3"'

    - name: Horizon - config web 
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      blockinfile:
        path: "{{ dashboard_local_settings_file }}"
        insertafter: EOF
        block: |
          WEBROOT = '/dashboard/'
          LOGIN_URL = '/dashboard/auth/login/'
          LOGOUT_URL = '/dashboard/auth/logout/'
          LOGIN_REDIRECT_URL = '/dashboard/'
          OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True
          OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = 'Default'

    - name: Horizon - config dashboard
      blockinfile:
        path: "{{ dashboard_conf_file }}"
        insertafter: "WSGISocketPrefix run/wsgi"
        block: |
          WSGIApplicationGroup %{GLOBAL}

    - name: Horizon - config openstack keystone url 
      replace:
        path: "{{ dashboard_conf_file }}"
        regexp: '^WSGIScriptAlias /dashboard /.*'
        replace: 'WSGIScriptAlias /dashboard /usr/share/openstack-dashboard/openstack_dashboard/wsgi.py'

    - name: Horizon - config openstack keystone url 
      replace:
        path: "{{ dashboard_conf_file }}"
        regexp: '<Directory /usr/share/openstack-dashboard/openstack_dashboard/wsgi>'
        replace: '<Directory /usr/share/openstack-dashboard/openstack_dashboard>'

    - name: Horizon - restart httpd
      service:
        name: "{{ httpd_service }}"
        state: restarted
