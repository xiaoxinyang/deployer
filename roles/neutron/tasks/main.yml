- name: Populate service facts
  service_facts:

- name: Set variables CentOS
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  set_fact:
    network_manager_packages: NetworkManager-ovs
    openvswitch_packages: "[ 'openvswitch', 'NetworkManager-ovs' ]"
    libvirt_kvm_packages: "[ 'qemu-kvm', 'libvirt', 'virt-install' ]"
    mariadb_pacakges: "[ 'mariadb', 'mariadb-server' ]"
    httpd_service: httpd
    glance_api_service: openstack-glance-api
    nova_services: "[ 'openstack-nova-api', 'openstack-nova-conductor', 'openstack-nova-novncproxy', 'openstack-nova-scheduler' ]"
    nova_compute_service: openstack-nova-compute
    dashboard_local_settings_file: "/etc/openstack-dashboard/local_settings"
    dashboard_conf_file: "/etc/httpd/conf.d/openstack-dashboard.conf"
    cinder_services: "['openstack-cinder-api', 'openstack-cinder-scheduler', 'openstack-cinder-volume']"

- name: Set variables Ubuntu
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  set_fact:
    network_manager_packages: network-manager
    openvswitch_packages: "[ 'openvswitch-switch' ] "
    libvirt_kvm_packages: "[ 'qemu-kvm', 'libvirt-daemon', 'libvirt-clients', 'libvirt-daemon-system' ]"
    mariadb_pacakges: "[ 'mariadb-server-10.3' ]"
    httpd_service: apache2
    glance_api_service: glance-api
    nova_services: "[ 'nova-api', 'nova-conductor', 'nova-novncproxy', 'nova-scheduler' ]"
    nova_compute_service: nova-compute
    dashboard_local_settings_file: "/etc/openstack-dashboard/local_settings.py"
    dashboard_conf_file: "/etc/apache2/conf-available/openstack-dashboard.conf"
    cinder_services: "['apache2', 'cinder-scheduler', 'cinder-volume']"

- name: Add epel
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  dnf:
    name: epel-release
    state: present

- name: Add the Repository of Openstack
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  shell: |
    add-apt-repository -y cloud-archive:{{ os_release }}

- name: Add the Repository of Openstack
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  dnf:
    name:
      - centos-release-openstack-{{ os_release }}

- name: openvswitch
  block:
    - name: openvswitch - Install
      package:
        name: "{{ openvswitch_packages }}"

    - name: openvswitch - Enable and start openvswitch
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      service:
        name: openvswitch
        enabled: yes
        state: started

    - name: openvswitch - Restart NetworkManager
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      service:
        name: NetworkManager
        enabled: yes
        state: restarted

    - name: openvswitch - Create br-{{ provider_interface }}
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      shell: |
        nmcli conn add type ovs-bridge conn.interface br-{{ provider_interface }} con-name br-{{ provider_interface }}
        nmcli conn add type ovs-port conn.interface br-{{ provider_interface }} master br-{{ provider_interface }} con-name ovs-port-br-{{ provider_interface }}
        nmcli conn add type ovs-interface slave-type ovs-port conn.interface br-{{ provider_interface }} master ovs-port-br-{{ provider_interface }}  con-name ovs-if-br-{{ provider_interface }} ipv4.method manual ipv4.address {{ controller_ip }}/24
        
        nmcli conn add type ovs-port conn.interface {{ provider_interface }} master br-{{ provider_interface }} con-name ovs-port-{{ provider_interface }}
        nmcli conn add type ethernet conn.interface {{ provider_interface }} master ovs-port-{{ provider_interface }} con-name ovs-if-{{ provider_interface }}

    - name: openvswitch - Create br-{{ provider_interface }}
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      shell: |
        echo "placeholder to configure ovs bridge"

- name: Neutron
  block:
    - name: Neutron - Install
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      dnf:
        name: openstack-neutron,openstack-neutron-ml2,openstack-neutron-openvswitch
        enablerepo: centos-openstack-{{ os_release }},powertools,epel
        state: latest

    - name: Neutron - Install
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      package:
        name: neutron-server,neutron-plugin-ml2,neutron-openvswitch-agent,neutron-dhcp-agent,neutron-l3-agent,neutron-metadata-agent
        state: latest

    - name: Neutron - Copy neutron.conf
      template:
        src:  "neutron.conf"
        dest: /etc/neutron/
        owner: root
        group: neutron 
        mode: 0640

    - name: Neutron - Update l3_agent.ini
      lineinfile:
        path: "/etc/neutron/l3_agent.ini"
        insertafter: "^\\[DEFAULT\\]$"
        regexp: "^interface_driver = .*$"
        line: "interface_driver = openvswitch"
        state: present

    - name: Neutron - Update metadata_agent.ini
      lineinfile:
        path: "/etc/neutron/metadata_agent.ini"
        insertafter: "^\\[DEFAULT\\]$"
        regexp: "^{{ item.key }} = .*$"
        line: "{{ item.key }} = {{ item.value}}"
        state: present
      with_items:
        - {key: "nova_metadata_host", value: "{{ controller_ip }}"}
        - {key: "metadata_proxy_shared_secret", value: "metadata_secret"}

    - name: Neutron - Update memcache_servers in metadata_agent.ini
      replace:
        path: "/etc/neutron/metadata_agent.ini"
        regexp: '^.*memcache_servers.*$'
        replace: 'memcache_servers = {{ controller_ip }}:11211'

    - name: Neutron - Copy ml2_conf.ini
      template:
        src:  "ml2_conf.ini"
        dest: /etc/neutron/plugins/ml2/
        owner: root
        group: neutron 
        mode: 0640

    - name: Neutron - link ml2_conf.ini to /etc/neutron/plugin.ini
      file:
        state: link
        src: /etc/neutron/plugins/ml2/ml2_conf.ini
        dest: /etc/neutron/plugin.ini

    - name: Neutron - Copy openvswitch_agent.ini
      template:
        src:  "openvswitch_agent.ini"
        dest: /etc/neutron/plugins/ml2/
        owner: root
        group: neutron 
        mode: 0640


    - name: Neutron - enable & start network services
      service:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - neutron-l3-agent
        - neutron-metadata-agent
        - neutron-openvswitch-agent

    - name: Neutron - restart nova compute service
      service:
        name: "{{ nova_compute_service }}"
        enabled: yes
        state: restarted

    - name: Neutron - create openvswitch bridge
      shell: |
        ovs-vsctl br-exists br-{{ provider_interface }} || ( ovs-vsctl add-br br-{{ provider_interface }} && ovs-vsctl add-port br-{{ provider_interface }} {{ provider_interface }} )

    - name: Neutron - restart openvswitch agent service
      service:
        name: neutron-openvswitch-agent
        enabled: yes
        state: restarted

